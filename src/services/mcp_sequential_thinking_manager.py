
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - MCP Sequential Thinking Manager
Gerenciador de racioc√≠nio sequencial para an√°lises complexas
"""

import os
import logging
import time
from typing import Dict, List, Any, Optional
from datetime import datetime

from services.ai_manager import ai_manager
from services.auto_save_manager import salvar_etapa, salvar_erro

logger = logging.getLogger(__name__)

class MCPSequentialThinkingManager:
    """Gerenciador de racioc√≠nio sequencial para an√°lises complexas"""

    def __init__(self):
        """Inicializa o manager de pensamento sequencial"""
        self.thinking_steps = [
            'data_analysis',
            'pattern_recognition', 
            'insight_generation',
            'strategic_conclusions',
            'actionable_recommendations'
        ]
        
        self.step_prompts = {
            'data_analysis': """
Analise os dados fornecidos de forma sistem√°tica:
1. Identifique os principais pontos de dados
2. Classifique informa√ß√µes por relev√¢ncia
3. Detecte tend√™ncias e padr√µes iniciais
4. Avalie a qualidade e completude dos dados

Dados para an√°lise: {data}
""",
            'pattern_recognition': """
Com base na an√°lise anterior, identifique padr√µes mais profundos:
1. Correla√ß√µes entre diferentes vari√°veis
2. Padr√µes comportamentais do p√∫blico
3. Tend√™ncias de mercado emergentes
4. Oportunidades e amea√ßas impl√≠citas

An√°lise anterior: {previous_step}
Dados originais: {data}
""",
            'insight_generation': """
Gere insights estrat√©gicos baseados nos padr√µes identificados:
1. Insights sobre o comportamento do consumidor
2. Oportunidades de mercado n√£o exploradas
3. Pontos de diferencia√ß√£o competitiva
4. Riscos e desafios potenciais

Padr√µes identificados: {previous_step}
Contexto completo: {data}
""",
            'strategic_conclusions': """
Formule conclus√µes estrat√©gicas s√≥lidas:
1. Posicionamento recomendado no mercado
2. Estrat√©gias de entrada ou expans√£o
3. Vantagens competitivas sustent√°veis
4. Roadmap estrat√©gico de alto n√≠vel

Insights gerados: {previous_step}
Contexto do neg√≥cio: {data}
""",
            'actionable_recommendations': """
Desenvolva recomenda√ß√µes pr√°ticas e acion√°veis:
1. A√ß√µes imediatas (0-30 dias)
2. Estrat√©gias de m√©dio prazo (1-6 meses)
3. Iniciativas de longo prazo (6+ meses)
4. KPIs e m√©tricas de acompanhamento

Conclus√µes estrat√©gicas: {previous_step}
Contexto operacional: {data}
"""
        }
        
        logger.info("üß† MCP Sequential Thinking Manager inicializado")

    def execute_sequential_analysis(
        self,
        data: Dict[str, Any],
        session_id: str,
        focus_area: str = "market_analysis",
        progress_callback: Optional[callable] = None
    ) -> Dict[str, Any]:
        """Executa an√°lise sequencial completa"""
        
        try:
            logger.info(f"üß† Iniciando an√°lise sequencial - Foco: {focus_area}")
            start_time = time.time()
            
            results = {
                'session_id': session_id,
                'focus_area': focus_area,
                'steps_completed': [],
                'step_results': {},
                'final_synthesis': {},
                'execution_metrics': {}
            }
            
            # Executa cada etapa sequencialmente
            previous_result = ""
            
            for i, step in enumerate(self.thinking_steps):
                try:
                    if progress_callback:
                        progress_callback(
                            i + 1, 
                            f"üß† Executando etapa {i+1}/5: {step.replace('_', ' ').title()}"
                        )
                    
                    logger.info(f"üîÑ Executando etapa: {step}")
                    
                    step_result = self._execute_thinking_step(
                        step, data, previous_result, session_id
                    )
                    
                    if step_result and step_result.get('success'):
                        results['steps_completed'].append(step)
                        results['step_results'][step] = step_result
                        previous_result = step_result.get('content', '')
                        
                        # Salva resultado da etapa
                        salvar_etapa(f"sequential_thinking_{step}", step_result, 
                                   categoria="drivers_mentais", session_id=session_id)
                        
                        logger.info(f"‚úÖ Etapa {step} conclu√≠da")
                    else:
                        logger.warning(f"‚ö†Ô∏è Etapa {step} falhou - continuando")
                        
                except Exception as e:
                    logger.error(f"‚ùå Erro na etapa {step}: {e}")
                    salvar_erro(f"sequential_thinking_{step}_error", e, 
                              contexto={'session_id': session_id, 'step': step})
                    continue
            
            # S√≠ntese final
            if progress_callback:
                progress_callback(6, "üîÆ Gerando s√≠ntese final do racioc√≠nio...")
            
            final_synthesis = self._generate_final_synthesis(results, data, session_id)
            results['final_synthesis'] = final_synthesis
            
            execution_time = time.time() - start_time
            results['execution_metrics'] = {
                'total_time': execution_time,
                'steps_successful': len(results['steps_completed']),
                'completion_rate': (len(results['steps_completed']) / len(self.thinking_steps)) * 100
            }
            
            # Salva resultado final
            salvar_etapa("sequential_thinking_complete", results, 
                       categoria="analise_completa", session_id=session_id)
            
            logger.info(f"‚úÖ An√°lise sequencial conclu√≠da em {execution_time:.2f}s")
            
            return {
                'success': True,
                'results': results,
                'completion_rate': results['execution_metrics']['completion_rate'],
                'execution_time': execution_time
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro cr√≠tico na an√°lise sequencial: {e}")
            salvar_erro("sequential_thinking_critical", e, 
                      contexto={'session_id': session_id, 'focus_area': focus_area})
            
            return {
                'success': False,
                'error': str(e),
                'session_id': session_id
            }

    def _execute_thinking_step(
        self,
        step: str,
        data: Dict[str, Any],
        previous_result: str,
        session_id: str
    ) -> Dict[str, Any]:
        """Executa uma etapa espec√≠fica do pensamento"""
        
        try:
            prompt_template = self.step_prompts.get(step, "")
            if not prompt_template:
                return {'success': False, 'error': f'Prompt n√£o encontrado para etapa: {step}'}
            
            # Formata prompt com dados
            formatted_prompt = prompt_template.format(
                data=str(data),
                previous_step=previous_result
            )
            
            # Executa com AI Manager
            ai_response = ai_manager.generate_response(
                formatted_prompt,
                max_tokens=2000,
                temperature=0.7,
                system_prompt=f"Voc√™ √© um especialista em {step.replace('_', ' ')} realizando an√°lise estrat√©gica profunda."
            )
            
            if ai_response and ai_response.get('success'):
                return {
                    'success': True,
                    'step': step,
                    'content': ai_response.get('content', ''),
                    'provider_used': ai_response.get('provider', 'unknown'),
                    'timestamp': datetime.now().isoformat()
                }
            else:
                return {
                    'success': False,
                    'step': step,
                    'error': ai_response.get('error', 'AI response failed')
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro executando etapa {step}: {e}")
            return {
                'success': False,
                'step': step,
                'error': str(e)
            }

    def _generate_final_synthesis(
        self,
        results: Dict[str, Any],
        original_data: Dict[str, Any],
        session_id: str
    ) -> Dict[str, Any]:
        """Gera s√≠ntese final do racioc√≠nio sequencial"""
        
        try:
            # Compila todos os resultados das etapas
            all_insights = []
            for step, result in results['step_results'].items():
                if result.get('success'):
                    all_insights.append(f"{step.replace('_', ' ').title()}:\n{result.get('content', '')}")
            
            synthesis_prompt = f"""
Com base no racioc√≠nio sequencial completo realizado, gere uma s√≠ntese final que:

1. Integre todos os insights das etapas anteriores
2. Identifique os 3 pontos mais cr√≠ticos para o neg√≥cio
3. Apresente uma recomenda√ß√£o estrat√©gica clara
4. Sugira pr√≥ximos passos pr√°ticos

Etapas do racioc√≠nio:
{chr(10).join(all_insights)}

Contexto original do neg√≥cio:
Segmento: {original_data.get('segmento', '')}
Produto: {original_data.get('produto', '')}
P√∫blico: {original_data.get('publico', '')}

Forne√ßa uma s√≠ntese executiva concisa mas abrangente.
"""
            
            ai_response = ai_manager.generate_response(
                synthesis_prompt,
                max_tokens=1500,
                temperature=0.6,
                system_prompt="Voc√™ √© um consultor estrat√©gico senior gerando s√≠ntese executiva."
            )
            
            if ai_response and ai_response.get('success'):
                return {
                    'success': True,
                    'synthesis': ai_response.get('content', ''),
                    'steps_integrated': len(results['steps_completed']),
                    'provider_used': ai_response.get('provider', 'unknown'),
                    'timestamp': datetime.now().isoformat()
                }
            else:
                return {
                    'success': False,
                    'error': 'Falha na gera√ß√£o da s√≠ntese final'
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro gerando s√≠ntese final: {e}")
            return {
                'success': False,
                'error': str(e)
            }

# Inst√¢ncia global
mcp_sequential_thinking_manager = MCPSequentialThinkingManager()
