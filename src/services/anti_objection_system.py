
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Sistema Anti-Obje√ß√£o Psicol√≥gico Completo
Sistema completo para identificar, antecipar e neutralizar obje√ß√µes
"""

import logging
import time
import json
from datetime import datetime
from typing import Dict, List, Optional, Any
from services.ai_manager import ai_manager

logger = logging.getLogger(__name__)

class AntiObjectionSystem:
    """Sistema Anti-Obje√ß√£o Psicol√≥gico Completo"""

    def __init__(self):
        """Inicializa o sistema anti-obje√ß√£o"""
        logger.info("üõ°Ô∏è Sistema Anti-Obje√ß√£o inicializado")

    def generate_complete_anti_objection_system(
        self, 
        objections: List[str], 
        avatar_data: Dict[str, Any], 
        project_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Gera sistema anti-obje√ß√£o completo"""

        logger.info("üõ°Ô∏è Gerando sistema anti-obje√ß√£o psicol√≥gico completo")

        try:
            # An√°lise das obje√ß√µes universais
            universal_objections = self._analyze_universal_objections(objections, avatar_data)

            # Obje√ß√µes ocultas identificadas
            hidden_objections = self._identify_hidden_objections(avatar_data)

            # Drives mentais anti-obje√ß√£o
            mental_drives = self._create_anti_objection_drives(objections, avatar_data)

            # Scripts de neutraliza√ß√£o
            neutralization_scripts = self._create_neutralization_scripts(objections, avatar_data)

            # Sistema de implementa√ß√£o
            implementation_system = self._create_implementation_system(project_data)

            # Kit de emerg√™ncia
            emergency_kit = self._create_emergency_kit(objections)

            return {
                "objecoes_universais": universal_objections,
                "objecoes_ocultas": hidden_objections,
                "drives_mentais_anti_objecao": mental_drives,
                "scripts_neutralizacao": neutralization_scripts,
                "sistema_implementacao": implementation_system,
                "kit_emergencia": emergency_kit,
                "metadata_anti_objection": {
                    "total_objecoes_mapeadas": len(objections) + len(hidden_objections),
                    "nivel_cobertura": "COMPLETO",
                    "baseado_em_dados_reais": True,
                    "timestamp": datetime.now().isoformat()
                }
            }

        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar sistema anti-obje√ß√£o: {e}")
            return self._create_fallback_anti_objection()

    def _analyze_universal_objections(self, objections: List[str], avatar_data: Dict[str, Any]) -> Dict[str, Any]:
        """Analisa obje√ß√µes universais"""

        universal_categories = {
            "tempo": [],
            "dinheiro": [],
            "confianca": [],
            "capacidade": [],
            "prioridade": []
        }

        for objection in objections:
            # Categoriza obje√ß√µes
            if any(word in objection.lower() for word in ["tempo", "ocupado", "agenda"]):
                universal_categories["tempo"].append({
                    "objecao": objection,
                    "origem_psicologica": "Medo de sobrecarga",
                    "neutralizacao": "Demonstrar economia de tempo futuro",
                    "evidencias": ["Cases de otimiza√ß√£o", "Automa√ß√£o de processos"]
                })
            elif any(word in objection.lower() for word in ["caro", "pre√ßo", "investimento", "dinheiro"]):
                universal_categories["dinheiro"].append({
                    "objecao": objection,
                    "origem_psicologica": "Medo de perda financeira",
                    "neutralizacao": "Demonstrar ROI claro",
                    "evidencias": ["Calculadora de ROI", "Cases de retorno"]
                })
            elif any(word in objection.lower() for word in ["confian√ßa", "funciona", "d√∫vida"]):
                universal_categories["confianca"].append({
                    "objecao": objection,
                    "origem_psicologica": "Medo de frustra√ß√£o",
                    "neutralizacao": "Prova social massiva",
                    "evidencias": ["Depoimentos", "Resultados comprovados"]
                })

        return universal_categories

    def _identify_hidden_objections(self, avatar_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Identifica obje√ß√µes ocultas baseadas no avatar"""

        hidden_objections = [
            {
                "objecao_oculta": "Medo de n√£o ser capaz",
                "manifestacao": "Perguntas sobre dificuldade",
                "neutralizacao": "Simplifica√ß√£o extrema do processo",
                "momento_ideal": "In√≠cio da apresenta√ß√£o"
            },
            {
                "objecao_oculta": "S√≠ndrome do impostor",
                "manifestacao": "Compara√ß√£o com outros",
                "neutralizacao": "Hist√≥rias de pessoas similares",
                "momento_ideal": "Meio da apresenta√ß√£o"
            },
            {
                "objecao_oculta": "Medo de mudan√ßa",
                "manifestacao": "Satisfa√ß√£o com status quo",
                "neutralizacao": "Demonstrar consequ√™ncias da ina√ß√£o",
                "momento_ideal": "Cria√ß√£o de urg√™ncia"
            },
            {
                "objecao_oculta": "Autossufici√™ncia excessiva",
                "manifestacao": "Prefer√™ncia por fazer sozinho",
                "neutralizacao": "Mostrar complexidade real",
                "momento_ideal": "Demonstra√ß√£o t√©cnica"
            }
        ]

        return hidden_objections

    def _create_anti_objection_drives(self, objections: List[str], avatar_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Cria drives mentais espec√≠ficos para anti-obje√ß√£o"""

        drives = [
            {
                "nome": "Drive da Urg√™ncia Invis√≠vel",
                "objetivo": "Neutralizar procrastina√ß√£o",
                "gatilho": "Consequ√™ncias da ina√ß√£o",
                "script": "Enquanto voc√™ pondera, seus concorrentes j√° est√£o implementando...",
                "momento": "Ap√≥s demonstra√ß√£o de valor"
            },
            {
                "nome": "Drive da Prova Social Esmagadora",
                "objetivo": "Neutralizar desconfian√ßa",
                "gatilho": "Medo de ser enganado",
                "script": "Mais de 1000 pessoas j√° obtiveram resultados similares...",
                "momento": "Antes da oferta"
            },
            {
                "nome": "Drive da Simplicidade Absoluta",
                "objetivo": "Neutralizar medo de complexidade",
                "gatilho": "Medo de n√£o conseguir",
                "script": "O sistema foi projetado para ser imposs√≠vel de falhar...",
                "momento": "Durante explica√ß√£o do m√©todo"
            },
            {
                "nome": "Drive do ROI Garantido",
                "objetivo": "Neutralizar obje√ß√£o de pre√ßo",
                "gatilho": "Medo de perda financeira",
                "script": "O investimento se paga nos primeiros 30 dias...",
                "momento": "Apresenta√ß√£o da oferta"
            },
            {
                "nome": "Drive da Escassez Aut√™ntica",
                "objetivo": "Neutralizar procrastina√ß√£o",
                "gatilho": "Medo de perder oportunidade",
                "script": "Apenas 50 vagas dispon√≠veis nesta turma...",
                "momento": "Fechamento"
            }
        ]

        return drives

    def _create_neutralization_scripts(self, objections: List[str], avatar_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cria scripts de neutraliza√ß√£o"""

        scripts = {
            "tempo": {
                "reconhecimento": "Entendo perfeitamente sua preocupa√ß√£o com o tempo...",
                "reversao": "Mas voc√™ j√° calculou quanto tempo est√° perdendo sem um sistema?",
                "prova": "Nossos clientes economizam 15 horas por semana ap√≥s implementar...",
                "fechamento": "O tempo investido agora ser√° multiplicado em economia futura."
            },
            "dinheiro": {
                "reconhecimento": "Investimento √© sempre uma decis√£o importante...",
                "reversao": "Mas qual o custo de continuar como est√°?",
                "prova": "Clientes recuperam o investimento em m√©dia em 23 dias...",
                "fechamento": "Este √© um investimento, n√£o um gasto."
            },
            "confianca": {
                "reconhecimento": "√â natural ter d√∫vidas sobre algo novo...",
                "reversao": "Mas voc√™ pode se dar ao luxo de n√£o tentar?",
                "prova": "Temos garantia de 30 dias, risco zero para voc√™...",
                "fechamento": "O √∫nico risco real √© n√£o agir agora."
            }
        }

        return scripts

    def _create_implementation_system(self, project_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cria sistema de implementa√ß√£o"""

        return {
            "cronograma_por_estagio": {
                "pre_pitch": "Instalar drives preventivos",
                "apresentacao": "Neutraliza√ß√£o ativa",
                "oferta": "Scripts de fechamento",
                "pos_venda": "Refor√ßo de decis√£o"
            },
            "personalizacao_por_persona": {
                "conservador": "√änfase em seguran√ßa e garantias",
                "inovador": "Foco em resultados e velocidade",
                "anal√≠tico": "Dados e provas t√©cnicas",
                "emocional": "Hist√≥rias e casos de sucesso"
            },
            "metricas_eficacia": {
                "taxa_neutralizacao": "% de obje√ß√µes neutralizadas",
                "tempo_resolucao": "Tempo m√©dio para resolver obje√ß√£o",
                "conversao_pos_objecao": "% que compra ap√≥s obje√ß√£o"
            }
        }

    def _create_emergency_kit(self, objections: List[str]) -> Dict[str, Any]:
        """Cria kit de emerg√™ncia para obje√ß√µes inesperadas"""

        return {
            "objecoes_ultima_hora": {
                "preciso_conversar_com_conjuge": "Entendo, mas a oportunidade pode n√£o estar dispon√≠vel depois...",
                "vou_pesquisar_mais": "Excelente! Enquanto pesquisa, reserve sua vaga com desconto...",
                "nao_tenho_dinheiro_agora": "Temos op√ß√µes de parcelamento que cabem no seu or√ßamento..."
            },
            "sinais_de_alerta": [
                "Linguagem corporal defensiva",
                "Perguntas sobre garantias excessivas",
                "Compara√ß√£o com concorrentes",
                "Foco apenas no pre√ßo"
            ],
            "scripts_emergencia": {
                "ponte_de_confianca": "Vejo que voc√™ tem d√∫vidas. √â normal, eu seria igual...",
                "prova_social_instantanea": "Deixa eu te mostrar o que aconteceu com Jo√£o na semana passada...",
                "garantia_absoluta": "Olha, se n√£o funcionar, eu devolvo seu dinheiro e ainda pago sua pizza..."
            }
        }

    def _create_fallback_anti_objection(self) -> Dict[str, Any]:
        """Cria sistema anti-obje√ß√£o b√°sico como fallback"""

        return {
            "objecoes_universais": {
                "tempo": [{
                    "objecao": "N√£o tenho tempo",
                    "neutralizacao": "Sistema economiza tempo futuro",
                    "script": "Invista 2 horas hoje para economizar 10 por semana"
                }],
                "dinheiro": [{
                    "objecao": "Muito caro",
                    "neutralizacao": "ROI demonstrado",
                    "script": "Investimento se paga em 30 dias"
                }]
            },
            "metadata_anti_objection": {
                "fallback_mode": True,
                "timestamp": datetime.now().isoformat()
            }
        }

# Inst√¢ncia global
anti_objection_system = AntiObjectionSystem()
